@page "/information"
@using Radzen.Blazor.Markdown

@inject AccessService AccessService
@inject SupabaseService Supabase
@inject IJSRuntime JSRuntime

<div class="information-wrapper">
     <div class="background">
          <img src="images/Luzern_1_rmb.png"
               class="background-graphic"
               alt=""/>
          <img src="images/Zweig_gruen.png"
               id="leftBranch"
               class="background-graphic-branch"
               alt=""/>
          <img src="images/Zweig_gruen.png"
               id="rightBranch"
               class="background-graphic-branch"
               alt=""/>
     </div>

     <!-- Information Grid section -->
     <div class="card information-container">
          <div class="card-body information-card">
               @if (AccessService.CurrentLevel >= AccessLevel.GuestInvited)
               {
                    <div class="row">
                         <!-- Ceremony -->
                         <div class="col-md-4">
                              <div class="card">
                                   <div class="card-body item-card text-center">
                                        @if (!string.IsNullOrEmpty(GetImageUrl("Ceremony")))
                                        {
                                             <div class="image-container" @onclick="async () => await ToggleSectionAndScroll(1)">
                                                  <img src="@GetImageUrl("Ceremony")"
                                                       class="information-item-image"/>
                                             </div>

                                        }
                                        <div class="text-center">
                                             <button class="btn btn-primary"
                                                     @onclick="() => ToggleSectionAndScroll(1)">
                                                  Zeremonie
                                             </button>
                                        </div>
                                   </div>
                              </div>
                         </div>

                         <!-- Love trail -->
                         <div class="col-md-4 ">
                              <div class="card">
                                   <div class="card-body item-card text-center" >
                                        @if (!string.IsNullOrEmpty(GetImageUrl("LoveTrail")))
                                        {
                                             <div class="image-container" @onclick="async () => await ToggleSectionAndScroll(2)">
                                                  <img src="@GetImageUrl("LoveTrail")"
                                                       class="information-item-image"/>
                                             </div>

                                        }
                                        <div class="text-center">
                                             <button class="btn btn-primary"
                                                     @onclick="() => ToggleSectionAndScroll(2)">
                                                  Love-Trail
                                             </button>
                                        </div>
                                   </div>
                              </div>
                         </div>

                         <!-- Party -->
                         <div class="col-md-4">
                              <div class="card">
                                   <div class="card-body item-card text-center">
                                        @if (!string.IsNullOrEmpty(GetImageUrl("Party")))
                                        {
                                             <div class="image-container" @onclick="async () => await ToggleSectionAndScroll(3)">
                                                  <img src="@GetImageUrl("Party")"
                                                       class="information-item-image"/>
                                             </div>

                                        }
                                        <div class="text-center">
                                             <button class="btn btn-primary"
                                                     @onclick="() => ToggleSectionAndScroll(3)">
                                                  Fest
                                             </button>
                                        </div>
                                   </div>
                              </div>
                         </div>
                    </div>
               }
               
               @if (AccessService.CurrentLevel == AccessLevel.GuestAll)
               {
                    <div class="card ">
                         <div class="card-body item-card">
                              <Ceremony />
                         </div>
                    </div>
               }
          </div>
     </div>

     @if (AccessService.CurrentLevel >= AccessLevel.GuestInvited)
     {
          <div class="card information-container mt-4" id="informationSection">
               <div class="card-body information-card">
                    <div class="row">
                         <div class="card ">
                              <div class="card-body item-card">
                                   @if (IsCeremonyVisible)
                                   {
                                        <div id="ceremonySection">
                                             <Ceremony/>
                                        </div>
                                   }

                                   @if (IsLoveTrailVisible)
                                   {
                                        <div id="loveTrailSection">
                                             <LoveTrail/>
                                        </div>
                                   }

                                   @if (IsPartyVisible)
                                   {
                                        <div id="partySection">
                                             <Party/>
                                        </div>
                                   }
                              </div>
                         </div>
                    </div>
               </div>
          </div>
     }
</div>



@code {
     private bool IsCeremonyVisible = true;
     private bool IsLoveTrailVisible = false;
     private bool IsPartyVisible = false;

     private List<InformationImages> images = [];

     protected override async Task OnInitializedAsync()
     {
          try
          {
               images = await GetImagesAsync();
          }
          catch (Exception ex)
          {
               Console.WriteLine($"Error fetching images in Information: {ex.Message}");
          }
     }

     private async Task<List<InformationImages>> GetImagesAsync()
     {
          return await Supabase.GetEntriesAsync<InformationImages>();
     }
     
     private string GetImageUrl(string title)
     {
          string url = "";

          foreach (var image in images)
          {
               if (image.Title == title)
               {
                    url = image.ImageUrl;
                    break; // stop after finding the match
               }
          }

          return url;
     }

     private async Task ToggleSectionAndScroll(int sectionNumber)
     {
          ToggleSection(sectionNumber);

          string sectionId = sectionNumber switch
          {
               1 => "ceremonySection",
               2 => "loveTrailSection",
               3 => "partySection",
               _ => ""
          };
    
          // Give the DOM time to update before scrolling to the specific section
          await Task.Delay(150);
          await JSRuntime.InvokeVoidAsync("scrollToFragment", "informationSection");

          await Task.Delay(50);
          await JSRuntime.InvokeVoidAsync("scrollToFragment", sectionId);
     }

     private void ToggleSection(int num)
     {
          switch (num)
          {
               case 1:
                    IsCeremonyVisible = true;
                    IsLoveTrailVisible = false;
                    IsPartyVisible = false;
                    break;
               case 2:
                    IsCeremonyVisible = false;
                    IsLoveTrailVisible = true;
                    IsPartyVisible = false;
                    break;
               case 3:
                    IsCeremonyVisible = false;
                    IsLoveTrailVisible = false;
                    IsPartyVisible = true;
                    break;
               default:
                    IsCeremonyVisible = true;
                    IsLoveTrailVisible = false;
                    IsPartyVisible = false;
                    break;
          }
          StateHasChanged();
     }
}