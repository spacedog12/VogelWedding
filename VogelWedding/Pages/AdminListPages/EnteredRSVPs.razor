@page "/enteredRSVPs"
@inject AccessService AccessService
@inject SupabaseService Supabase
@inject IBlazorCurrentDeviceService CurrentDevice
@using Radzen
@using Radzen.Blazor
@using MudBlazor


@* Required *@
<MudThemeProvider/>
<MudPopoverProvider/>

<div class="page-wrapper">
    <Background/>

    <div class="card page-container">
        <!-- Summary -->
        <div class="@(IsMobile ? "" : "card-body") page-card-frosted mb-5">
            <div class="card">
                <div class="card-body">
                    <h1 class="card-title">Übersicht</h1>
                    <h3 class="card-subtitle">Total Teilnehmer:</h3>
                    <p>@GetTotalAttendees(true) Fest / @GetTotalAttendees(false) Zeremonie</p>
                    <hr class="mt-4"/>
                    <h3 class="card-subtitle">Total Kuchen:</h3>
                    <p>@GetTotalCakes()</p>
                </div>
            </div>
        </div>

        <!-- RSVP List -->
        <div class="@(IsMobile ? "" : "card-body") page-card-frosted">
            <MudTable Items="@rsvpEntries"
                      Dense="true"
                      Hover="true"
                      Bordered="false"
                      Filter="new Func<RsvpEntry, bool>(FilterFunc)"
                      SortLabel="Sort By"
                      FixedHeader="true"
                      HorizontalScrollbar="true"
                      Height="645px"
                      Loading="@_loading"
                      LoadingProgressColor="Color.Info"
                      Style="@(IsMobile ? "overflow-x:hidden; white-space: normal; width:100%;" : "overflow-x:auto; white-space: nowrap;")">
                <ColGroup>
                    /* Vorname */
                    <col style="width: 60px"/>
                    /* Nachname */
                    <col style="width: 100px"/>
                    /* Anmeldung */
                    <col style="width: 100px"/>
                    /* Teilnehmer */
                    <col style="width: 100px"/>
                    /* Email */
                    <col style="width: 100px"/>
                    /* Addresse */
                    <col style="width: 100px"/>
                    /* Buffet */
                    <col style="width: 60px"/>
                    /* Mitteilung */
                    <col style="width: 200px; max-width: 200px"/>
                    /* Registrierung von */
                    <col style="width: 100px"/>
                    /* Registriert am */
                    <col style="width: 100px"/>
                </ColGroup>
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Anmeldungen</MudText>
                    <MudSpacer/>
                    <MudTextField @bind-Value="_searchString"
                                  Placeholder="Suchen"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Search"
                                  IconSize="Size.Medium"
                                  Class="mt-0"/>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<RsvpEntry, object>(x => x.FirstName)">Vorname
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<RsvpEntry, object>(x => x.FamilyName)">Nachname
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<RsvpEntry, object>(x => x.Attending)">Anmeldung
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<RsvpEntry, object>(x => x.NumberOfAttendees)">
                            Teilnehmer
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<RsvpEntry, object>(x => x.EmailAddress)">Email
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh>Addresse</MudTh>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<RsvpEntry, object>(x => x.BuffetContribution)">Buffet
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<RsvpEntry, object>(x => x.Message)">Mitteilung
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<RsvpEntry, object>(x => x.Invited)">Registrierung von
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<RsvpEntry, object>(x => x.CreatedAt)">Registriert am
                        </MudTableSortLabel>
                    </MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Vorname"
                           style="white-space:nowrap; 
                                  overflow:hidden; 
                                  text-overflow:ellipsis;">
                        @context.FirstName
                    </MudTd>
                    <MudTd DataLabel="Nachname"
                           style="white-space:nowrap; 
                                  overflow:hidden; 
                                  text-overflow:ellipsis;">
                        @context.FamilyName
                    </MudTd>
                    <MudTd DataLabel="Anmeldung"
                           style="white-space:nowrap; 
                                  overflow:hidden; 
                                  text-overflow:ellipsis;">
                        @GetAttendingText(context.Attending)
                    </MudTd>
                    <MudTd DataLabel="Teilnehmer"
                           style="text-align:center">
                        @context.NumberOfAttendees
                    </MudTd>
                    <MudTd DataLabel="Email"
                           style="white-space:nowrap; 
                                  overflow:hidden; 
                                  text-overflow:ellipsis;">
                        @context.EmailAddress
                    </MudTd>
                    <MudTd DataLabel="Addresse"
                           style="white-space:nowrap; 
                                  overflow:hidden; 
                                  text-overflow:ellipsis;">
                        @context.Street, @context.ZipCode @context.Place
                    </MudTd>
                    <MudTd DataLabel="Buffet">
                        @(context.BuffetContribution ? "Ja" : "Nein")
                    </MudTd>
                    <MudTd DataLabel="Mitteilung"
                           style="white-space:nowrap; 
                                  overflow:hidden; 
                                  text-overflow:ellipsis;">

                        @context.Message

                    </MudTd>
                    <MudTd DataLabel="Registrierung von"
                           style="white-space:nowrap; 
                                  overflow:hidden; 
                                  text-overflow:ellipsis;">
                        @(context.Invited ? "Fest" : "Zeremonie")
                    </MudTd>
                    <MudTd DataLabel="Registriert am"
                           style="white-space:nowrap; 
                                  overflow:hidden; 
                           ">
                        @context.CreatedAt.ToLocalTime().ToString("dd.MM.yyyy | HH:mm:ss")
                    </MudTd>
                </RowTemplate>
                @* <PagerContent> *@
                @*     <MudTablePager /> *@
                @* </PagerContent> *@
                
                <NoRecordsContent>
                    <MudText>Keine Einträge gefunden.</MudText>
                </NoRecordsContent>
            </MudTable>

        </div>
    </div>
</div>

@code {
    private List<RsvpEntry> rsvpEntries = new List<RsvpEntry>();
    private string _searchString = "";
    private bool _loading = false;
    private bool IsMobile { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            IsMobile = await CurrentDevice.Mobile();
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            rsvpEntries = await GetRsvpEntries();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading RSVP entries: {ex.Message}");
        }
    }

    private async Task<List<RsvpEntry>> GetRsvpEntries()
    {
        return await Supabase.GetEntriesAsync<RsvpEntry>();
    }

    private bool FilterFunc(RsvpEntry element)
    {
        if (string.IsNullOrWhiteSpace(_searchString)) return true;

        return element.FirstName?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true
               || element.FamilyName?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true;
    }

    private string GetAttendingText(string attending)
    {
        switch (attending)
        {
            case "ReceptionAndCeremony":
                return "Empfang und Zeremonie";
            case "ReceptionCeremonyAndParty":
                return "Empfang, Zeremonie und Party";
            case "CeremonyOnly":
                return "Nur Zeremonie";
            case "PartyOnly":
                return "Nur Party";
            case "CanNotAttend":
                return "Kann nicht teil nehmen";
            default:
                return "";
        }
    }

    private int GetTotalAttendees(bool invited)
    {
        var num = 0;

        foreach (var entry in rsvpEntries)
        {
            if (entry.Invited == invited)
            {
                num += entry.NumberOfAttendees;
            }
        }

        return num;
    }

    private int GetTotalCakes()
    {
        var num = 0;

        foreach (var entry in rsvpEntries)
        {
            if (entry.BuffetContribution)
            {
                num++;
            }
        }

        return num;
    }
}