@page "/geschenke"
@using System.Globalization

@inject SupabaseService Supabase
@* @inject SupabaseWishlistService WishlistService *@
@inject IToastService ToastService
@inject IBlazorCurrentDeviceService CurrentDevice

<div class="page-wrapper">
    <Background/>

    <!-- Info Text Wishlist -->
    <div class="card page-container">
        <div class="card-body page-card-frosted">
            @* <h2 class="card-title">Wilkommen</h2> *@
            <h1>Das gr√∂sste Geschenk f√ºr uns seid ihr</h1>
            <p>
                ‚Äì dass ihr diesen Tag mit uns feiert, mitlebt, mitsingt, mitgeniesst.
                Wer uns dar√ºber hinaus gerne beschenken m√∂chte: wir freuen uns √ºber Beitr√§ge zu unserem gemeinsamen
                Start ins Ehe-Leben. Wir haben eigentlich schon alles ‚Äì <i>au√üer Zeit zum Genie√üen</i>. Und genau da
                kommt ihr
                ins Spiel.</p>
            <p>
                Wenn ihr uns eine Freude machen m√∂chtet, dann am liebsten mit Dingen, die den Alltag vers√º√üen und uns
                gemeinsame Genussmomente schenken. Ob Wellness, Massagen, gutes Essen, edle Tropfen, Kulturtrips,
                Spieleabende, Ausfl√ºge, Literatur, Theater, Musik oder Museumsbesuche ‚Äì wir lieben alles, was entspannt,
                inspiriert oder einfach Spa√ü macht. Also: Schenkt uns keinen Toaster und keine Dekorationen ‚Äì <i>schenkt
                    uns Erinnerungen.</i></p>
            <p>Und falls ihr uns mit einer kleinen Portion Spannung √ºberraschen wollt: <i>auch √ºber ein paar Win for
                    Life-Lose freuen wir uns sehr</i> ‚Äì man weiss ja nie, vielleicht liegt unser Gl√ºck ja in einem
                dieser
                kleinen K√§rtchen. üòâ</p>
            <p>
                <strong>Vielen Dank, dass ihr mit uns feiert, an uns denkt ‚Äì und vielleicht sogar ein bisschen Genuss
                    (oder das gro√üe Los) in unser frisch verheiratetes Leben bringt.</strong>
            </p>
        </div>
    </div>

    <!-- wishlist -->
    <div class="card page-container mt-2">
        <div class="card-body page-card-frosted">
            <h1 class="card-title">Geschenke</h1>

            @if (wishlistItems == null)
            {
                <p>Lade Geschenke...</p>
            }
            else
            {
                <div class="row">
                    @foreach (var item in wishlistItems)
                    {
                        <div class="col-md-4 mb-4">
                            <div class="card">
                                <div class="card-body item-card">
                                    @if (!string.IsNullOrEmpty(item.ImageUrl))
                                    {
                                        <img src="@item.ImageUrl" alt="Image for @item.Title"
                                             class="wishlist-item-image"/>
                                    }
                                    <h3> @item.Title</h3>
                                    <p>@item.Description</p>
                                    @if (item.Price.HasValue)
                                    {
                                        @if (item.Quantity.HasValue)
                                        {
                                            <p>
                                                <strong>Preis:</strong> @item.Price.Value.ToString("C", new CultureInfo("de-CH"))
                                            </p>
                                        }
                                        else
                                        {
                                            <p>
                                                <strong>Preis:</strong> @item.Price.Value.ToString("C", new CultureInfo("de-CH"))
                                            </p>
                                            <p>
                                                <strong>Bereits
                                                    geschenkt:</strong> @item.PaidAmount.Value.ToString("C", new CultureInfo("de-CH"))
                                            </p>
                                        }
                                    }

                                    @if (item.Quantity.HasValue)
                                    {
                                        <p>Verf√ºgbar: @item.Quantity</p>
                                    }

                                    <button class="btn btn-primary" disabled="@ButtonDisabled(item)"
                                            @onclick="() => OpenBuyModal(item)">
                                        Schenken
                                    </button>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }

            <!-- Modal -->
            @if (showModal && selectedItem != null)
            {
                <div class="modal show d-block" tabindex="-1">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">Kauf: @selectedItem.Title</h5>
                                <button type="button" class="btn-close" @onclick="CloseModal"></button>
                            </div>
                            <div class="modal-body">
                                <EditForm Model="@purchaseModel" OnValidSubmit="SubmitPurchase">
                                    <DataAnnotationsValidator/>
                                    <div class="mb-3">
                                        <label>Vorname</label>
                                        <InputText class="form-control" @bind-Value="purchaseModel.FirstName" required/>
                                    </div>
                                    <div class="mb-3">
                                        <label>Nachname</label>
                                        <InputText class="form-control" @bind-Value="purchaseModel.FamilyName"
                                                   required/>
                                    </div>
                                    <div class="mb-3">
                                        <label>Email</label>
                                        <InputText class="form-control" @bind-Value="purchaseModel.Email" required/>
                                        <ValidationMessage For="@(() => purchaseModel.Email)"/>
                                    </div>

                                    @if (selectedItem.Price.HasValue && !selectedItem.Quantity.HasValue)
                                    {
                                        <div class="mb-3">
                                            <label>Betrag</label> <!-- (max. @selectedItem.Price.Value.ToString("C", new
                                                                        CultureInfo("de-CH"))) -->
                                            <InputNumber class="form-control" @bind-Value="purchaseModel.PaidAmount"
                                                         min="10"
                                                         max="@selectedItem.Price"/>
                                        </div>
                                    }
                                    else if (!selectedItem.Price.HasValue && !selectedItem.Quantity.HasValue)
                                    {
                                        <div class="mb-3">
                                            <label>Betrag</label>
                                            <InputNumber class="form-control" @bind-Value="purchaseModel.PaidAmount"
                                                         min="10"/>
                                        </div>
                                    }
                                    else if (selectedItem.Price.HasValue && selectedItem.Quantity.HasValue)
                                    {
                                        <p>Preis pro
                                            St√ºck: @selectedItem.Price.Value.ToString("C", new CultureInfo("de-CH"))
                                        </p>
                                        <InputNumber class="d-none" @bind-Value="purchaseModel.PaidAmount"/>
                                        @* <InputNumber class="d-none" @bind-Value="purchaseModel.Quantity"/> *@
                                    }
                                    <button type="submit" class="btn btn-primary">Jetzt schenken</button>
                                    <button type="button" class="btn btn-secondary ms-2" @onclick="CloseModal">
                                        Abbrechen
                                    </button>
                                </EditForm>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-backdrop fade show"></div>
            }

            <!-- Modal for confirmation / error -->
            @if (showConfirmationModal && selectedItem != null)
            {
                <div class="modal show d-block" tabindex="-1">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                @* <h5 class="modal-title">Best√§tigung: @selectedItem.Title</h5> *@
                                @* <button type="button" class="btn-close-white" @onclick="CloseConfirmationModal"></button> *@
                                @switch (purchaseResult)
                                {
                                    case PurchaseResult.Success:
                                        <h5 class="modal-title">‚úÖ Erfolgreich: @selectedItem.Title</h5>
                                        break;
                                    case PurchaseResult.NotAvailable:
                                        <h5 class="modal-title">‚ö†Ô∏è Nicht verf√ºgbar: @selectedItem.Title</h5>
                                        break;
                                    case PurchaseResult.DatabaseError:
                                        <h5 class="modal-title">‚ùå Fehler: @selectedItem.Title</h5>
                                        break;
                                }

                            </div>
                            <div class="modal-body">
                                @* @if (isItemAvailable) *@
                                @* { *@
                                @*     <div class="text-center"> *@
                                @*         <h4>Herzlichen Dank!</h4> *@
                                @*         <p>Dein Geschenk wurde erfolgreich reserviert.</p> *@
                                @*         <p>Du erh√§ltst in K√ºrze eine Mail mit den Zahlungsdetails.</p> *@
                                @*         <button type="button" *@
                                @*                 class="btn btn-primary" *@
                                @*                 @onclick="FinalizeSubmit"> *@
                                @*             Ok *@
                                @*         </button> *@
                                @*     </div> *@
                                @* } *@
                                @* else *@
                                @* { *@
                                @*     <div class="text-center"> *@
                                @*         <h4>Sorry!</h4> *@
                                @*         <p>Da war jemand schneller beim Kauf und das Geschenk ist bereits vollst√§ndig *@
                                @*             finanziert ü•≥.\n *@
                                @*             Beim N√§chsten mal funktionierts bestimmt.</p> *@
                                @*         <button type="button" *@
                                @*                 class="btn btn-primary" *@
                                @*                 @onclick="CloseAllModals"> *@
                                @*             Zur√ºck zur √úbersicht *@
                                @*         </button> *@
                                @*     </div> *@
                                @* } *@
                                @switch (purchaseResult)
                                {
                                    case PurchaseResult.Success:
                                        <div class="text-center">
                                            <h4>Herzlichen Dank!</h4>
                                            <p>Dein Geschenk wurde erfolgreich reserviert.</p>
                                            <p>Du erh√§ltst in K√ºrze eine Mail mit den Zahlungsdetails.</p>
                                            <button type="button"
                                                    class="btn btn-primary"
                                                    @onclick="FinalizeSubmit">
                                                Ok
                                            </button>
                                        </div>
                                        break;

                                    case PurchaseResult.NotAvailable:
                                        <div class="text-center">
                                            <h4>Sorry!</h4>
                                            <p>Da war jemand schneller beim Kauf.<br/>
                                                Beim N√§chsten mal funktionierts bestimmt.
                                            </p>
                                            <button type="button"
                                                    class="btn btn-primary"
                                                    @onclick="CloseAllModals">
                                                Zur√ºck zur √úbersicht
                                            </button>
                                        </div>
                                        break;

                                    case PurchaseResult.DatabaseError:
                                        <div class="text-center">
                                            <h4 class="">Technischer Fehler</h4>
                                            <p>Entschuldigung, beim Verarbeiten deines Kaufs ist ein Fehler
                                                aufgetreten.</p>
                                            <div class="alert alert-danger">
                                                <strong>Fehlermeldung:</strong> @errorMessage
                                            </div>
                                            <p>Bitte versuche es sp√§ter nochmal oder kontaktiere uns direkt.</p>
                                            <div>
                                                <button type="button"
                                                        class="btn btn-primary me-2"
                                                        @onclick="CloseAllModals">
                                                    Zur√ºck zur √úbersicht
                                                </button>
                                            </div>
                                        </div>
                                        break;
                                }

                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-backdrop fade show"></div>
            }
        </div>
    </div>
</div>


@code {

    private List<WishlistItem> wishlistItems;

    // private List<WishlistImages> images = [];
    private WishlistItem selectedItem;
    private WishlistPurchase purchaseModel = new();
    private bool showModal = false;
    private bool showConfirmationModal = false;
    private bool isItemAvailable;
    private PurchaseResult purchaseResult;
    private string errorMessage = "";
    private bool IsMobile { get; set; }

    private enum PurchaseResult
    {
        Success,
        NotAvailable,
        DatabaseError
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            IsMobile = await CurrentDevice.Mobile();
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            wishlistItems = await GetWishlistItemsAsync();

            // Sort Items
            SortWishlistItems();

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching Items: {ex.Message}");
        }
    }

    private void SortWishlistItems()
    {
        wishlistItems = wishlistItems.OrderBy(item => item.SortNumber).ToList();
    }

    private void HandleWishlistItemUpdated(WishlistItem updatedItem)
    {
        var index = wishlistItems.FindIndex(item => item.ID == updatedItem.ID);
        if (index != -1)
        {
            wishlistItems[index] = updatedItem;
            SortWishlistItems();
            InvokeAsync(StateHasChanged);
        }
    }

    private void HandleWishlistItemInserted(WishlistItem newItem)
    {
        wishlistItems.Add(newItem);
        SortWishlistItems();
        InvokeAsync(StateHasChanged);
    }

    private void HandleWishlistItemDeleted(WishlistItem deletedItem)
    {
        wishlistItems.RemoveAll(item => item.ID == deletedItem.ID);
        InvokeAsync(StateHasChanged);
    }

    private async Task<List<WishlistItem>> GetWishlistItemsAsync()
    {
        return await Supabase.GetEntriesAsync<WishlistItem>();
    }

    private void OpenBuyModal(WishlistItem item)
    {
        selectedItem = item;
        purchaseModel = new WishlistPurchase
        {
            WishlistItemId = item.ID,
        };

        if (item.Quantity.HasValue && item.Price.HasValue)
        {
            // Quantity-based item with price per unit
            // purchaseModel.Quantity = 1;
            purchaseModel.PaidAmount = item.Price.Value;
        }
        else
        {
            // Open contribution or single-price item
            purchaseModel.PaidAmount = 10; // Minimum 10 CHF
        }

        showModal = true;

    }

    private void CloseModal()
    {
        showModal = false;
        selectedItem = null;
    }

    private void CloseConfirmationModal()
    {
        showConfirmationModal = false;
    }

    private async Task SubmitPurchase()
    {
        try
        {
            // Check availablility first
            var currentItem = await Supabase.GetWishlistItemAsync(selectedItem.ID);
            isItemAvailable = IsItemStillAvailable(currentItem);

            if (!isItemAvailable)
            {
                purchaseResult = PurchaseResult.NotAvailable;
                showModal = false;
                showConfirmationModal = true;

                wishlistItems = await GetWishlistItemsAsync();
                SortWishlistItems();
                return;
            }

            // Show confirmation modal
            await Supabase.SetPurchaseAsync(purchaseModel);

            purchaseResult = PurchaseResult.Success;
            showModal = false;
            showConfirmationModal = true;

            await RefreshWishlistItems();
            SortWishlistItems();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error checking availability: {ex.Message}");

            purchaseResult = PurchaseResult.DatabaseError;
            errorMessage = ex.Message;
            showModal = false;
            showConfirmationModal = true;
        }
    }

    private bool IsItemStillAvailable(WishlistItem item)
    {
        if (item.Quantity.HasValue)
        {
            return item.Quantity > 0;
        }

        if (item.Price.HasValue)
        {
            return item.PaidAmount < item.Price;
        }

        return true; // For items without quantity or price constraints
    }

    private async Task FinalizeSubmit()
    {
        try
        {
            // await Supabase.SetPurchaseAsync(purchaseModel);

            // Refresh the wishlist items
            // wishlistItems = await GetWishlistItemsAsync();
            // SortWishlistItems();
            // await RefreshWishlistItems();

            // Close the modals
            CloseAllModals();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving purchase: {ex.Message}");
            ToastService.ShowError($"Sorry, da ist was schief gelaufen: {ex.Message}");
            // Here you might want to show an error message to the user
        }
    }

    private async Task RefreshWishlistItems()
    {
        wishlistItems = await GetWishlistItemsAsync();
        SortWishlistItems();
        InvokeAsync(StateHasChanged);
    }

    private void CloseAllModals()
    {
        showModal = false;
        showConfirmationModal = false;
        selectedItem = null;
        errorMessage = "";
        InvokeAsync(StateHasChanged);
    }

    private bool ButtonDisabled(WishlistItem item)
    {
        // Case 1: Quantity is null
        if (item.Quantity == null)
        {
            // Button is active if Price is not 0 or Price is null
            return item.Price.HasValue && item.Price.Value <= item.PaidAmount.Value;
        }

        // Case 2: Quantity is not null
        return item.Quantity <= 0;
    }
}