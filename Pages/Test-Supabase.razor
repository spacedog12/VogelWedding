@page "/test-supabase"
@inject SupabaseService Supabase
@inject IToastService ToastService

<h3>Test Supabase Connection</h3>

<div class="card">
    <div class="card-body">
        <button class="btn btn-primary" @onclick="CreateTestEntry">Create Test RSVP</button>
        
        @if (entries != null)
        {
            <div class="mt-3">
                <h4>Existing Entries:</h4>
                <ul class="list-group">
                    @foreach (var entry in entries)
                    {
                        <li class="list-group-item">
                            @entry.FirstName @entry.FamilyName - @(entry.Attending ? "Attending" : "Not Attending")
                        </li>
                    }
                </ul>
            </div>
        }
    </div>
</div>


@code {
    private List<RsvpEntry>? entries;

    protected override async Task OnInitializedAsync()
    {
        await LoadEntries();
    }

    private async Task LoadEntries()
    {
        try
        {
            entries = await Supabase.GetRsvpEntriesAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Failed to load entries: {ex.Message}");
        }
    }

    private async Task CreateTestEntry()
    {
        try
        {
            var testEntry = new RsvpEntry
            {
                Id = Guid.NewGuid(),
                FirstName = "Test",
                FamilyName = "User",
                Attending = true,
                Menu = true
            };

            await Supabase.SubmitRsvpAsync(testEntry);
            ToastService.ShowSuccess("Test entry created successfully!");
            await LoadEntries();
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Failed to create test entry: {ex.Message}");
        }

    }


}